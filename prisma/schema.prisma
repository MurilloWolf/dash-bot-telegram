// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgres"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  telegramId    String    @unique
  name          String
  username      String?
  isActive      Boolean   @default(true)
  isPremium     Boolean   @default(false)
  premiumSince  DateTime?
  premiumEndsAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastSeenAt    DateTime?

  preferences   UserPreferences?
  messages      Message[]        @relation("UserMessages")
  payments      Payment[]
  subscriptions Subscription[]

  @@index([telegramId])
  @@index([username])
  @@index([isPremium])
}

model Chat {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  type        ChatType
  title       String?
  username    String?
  memberCount Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  messages Message[] @relation("ChatMessages")

  @@index([telegramId])
  @@index([type])
}

model Message {
  id         String           @id @default(cuid())
  telegramId BigInt           @unique
  text       String?
  direction  MessageDirection
  type       MessageType
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  editedAt   DateTime?
  isDeleted  Boolean          @default(false)

  userId    String?
  user      User?     @relation("UserMessages", fields: [userId], references: [id])
  chatId    String?
  chat      Chat?     @relation("ChatMessages", fields: [chatId], references: [id])
  replyToId String?
  replyTo   Message?  @relation("Replies", fields: [replyToId], references: [id])
  replies   Message[] @relation("Replies")
  media     Media[]
  location  Location?

  @@index([telegramId])
  @@index([createdAt])
  @@index([userId])
  @@index([chatId])
  @@index([type])
}

model Media {
  id         String    @id @default(cuid())
  telegramId String    @unique
  type       MediaType
  url        String?
  fileSize   Int?
  width      Int?
  height     Int?
  duration   Int?
  mimeType   String?

  messageId String
  message   Message @relation(fields: [messageId], references: [id])

  @@index([messageId])
}

model Location {
  id         String @id @default(cuid())
  latitude   Float
  longitude  Float
  accuracy   Float?
  livePeriod Int?

  messageId String  @unique
  message   Message @relation(fields: [messageId], references: [id])
}

// --- Payments and service subscription ---
model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  currency    String      @default("BRL")
  billingType BillingType @default(RECURRING)
  interval    String? // "month", "year"
  isActive    Boolean     @default(true)
  features    Json // Ex: {"advancedAnalytics": true}
  createdAt   DateTime    @default(now())

  payments      Payment[]
  subscriptions Subscription[]

  @@index([price, isActive])
}

model Payment {
  id               String        @id @default(cuid())
  telegramChargeId String?
  provider         String // "telegram", "stripe", etc.
  amount           Float
  currency         String        @default("BRL")
  status           PaymentStatus @default(PENDING)
  userEmail        String?
  userPhone        String?
  createdAt        DateTime      @default(now())
  paidAt           DateTime?
  expiresAt        DateTime?
  invoiceUrl       String?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  subscriptions Subscription[]

  @@index([userId, status])
  @@index([telegramChargeId])
}

model Subscription {
  id          String    @id @default(cuid())
  startDate   DateTime  @default(now())
  endDate     DateTime?
  isActive    Boolean   @default(true)
  autoRenew   Boolean   @default(true)
  cancelledAt DateTime?

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@index([userId, isActive])
  @@index([endDate])
}

model UserPreferences {
  id                   String  @id @default(cuid())
  preferredDistances   Json    @default("[]") // [5, 10, 21] (km)
  notificationsEnabled Boolean @default(true)
  reminderDays         Int     @default(3)
  timezone             String  @default("America/Sao_Paulo")
  language             String  @default("pt-BR")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Race {
  id               String     @id @default(cuid())
  title            String
  organization     String
  distances        Json       @default("[]") // ["5km", "10km"]
  distancesNumbers Json       @default("[]") // [5, 10]
  date             DateTime
  location         String
  link             String
  time             String
  status           RaceStatus @default(OPEN)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([date])
  @@index([status])
}

// --- ENUMS ---
enum ChatType {
  PRIVATE
  GROUP
  SUPERGROUP
  CHANNEL
  BOT
}

enum MessageDirection {
  INCOMING
  OUTGOING
}

enum MessageType {
  TEXT
  PHOTO
  VIDEO
  DOCUMENT
  AUDIO
  VOICE
  LOCATION
  CONTACT
  POLL
  OTHER
}

enum MediaType {
  PHOTO
  VIDEO
  DOCUMENT
  AUDIO
  VOICE
  STICKER
}

enum BillingType {
  ONE_TIME
  RECURRING
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  EXPIRED
}

enum RaceStatus {
  OPEN
  CLOSED
  COMING_SOON
  CANCELLED
}
