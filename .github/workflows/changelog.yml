name: 📝 Changelog

on:
  push:
    branches: [main]
    paths-ignore:
      - 'CHANGELOG.md'
      - 'package.json'
      - 'package-lock.json'
  release:
    types: [published]

jobs:
  changelog:
    name: 📝 Generate Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: � Pull latest changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull --rebase origin main || true

      - name: �📝 Generate Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: 'CHANGELOG.md'
          version-file: 'package.json'
          version-path: 'version'
          create-summary: true
          skip-on-empty: true
          skip-version-file: false
          skip-commit: true
          preset: 'conventionalcommits'
          tag-prefix: 'v'
          release-count: 10

      - name: � Update version and commit
        if: steps.changelog.outputs.skipped == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Pull any new changes before committing
          git pull --rebase origin main || true

          # Determine version bump based on commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS_SINCE_TAG=$(git log ${LAST_TAG}..HEAD --format="%s")

          if echo "$COMMITS_SINCE_TAG" | grep -q "BREAKING CHANGE\|!:"; then
            NEW_VERSION=$(npm version major --no-git-tag-version)
          elif echo "$COMMITS_SINCE_TAG" | grep -q "^feat"; then
            NEW_VERSION=$(npm version minor --no-git-tag-version)
          elif echo "$COMMITS_SINCE_TAG" | grep -q "^fix\|^perf\|^refactor"; then
            NEW_VERSION=$(npm version patch --no-git-tag-version)
          else
            echo "No significant changes found, skipping version bump"
            exit 0
          fi

          # Commit and push with retry logic
          for i in {1..3}; do
            git add CHANGELOG.md package.json package-lock.json 2>/dev/null || true
            if git diff --staged --quiet; then
              echo "No changes to commit"
              exit 0
            fi
            
            git commit -m "chore(release): ${NEW_VERSION} [skip ci]" || true
            
            if git push origin main; then
              echo "Successfully pushed changes"
              break
            else
              echo "Push failed, attempt $i/3. Pulling and retrying..."
              git pull --rebase origin main || true
              if [ $i -eq 3 ]; then
                echo "Failed to push after 3 attempts"
                exit 1
              fi
            fi
          done

      - name: � Create Release
        if: steps.changelog.outputs.skipped == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.changelog.outputs.version }}
          release_name: Release v${{ steps.changelog.outputs.version }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
          draft: false
          prerelease: false

  eslint-analysis:
    name: 📊 ESLint Report Analysis
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: read
      security-events: write

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Generate ESLint report
        run: npm run lint:report
        continue-on-error: true

      - name: 📊 Upload ESLint results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-report.json
        continue-on-error: true
