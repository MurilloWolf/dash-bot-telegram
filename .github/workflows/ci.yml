name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20

jobs:
  lint-and-format:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 📊 Generate ESLint report
        if: always()
        run: npm run lint:report || true

      - name: 📊 Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json

  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🗄️ Setup test database
        run: |
          npm run db:setup:test
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/testdb'
          POSTGRES_URL_NON_POOLING: 'postgresql://test:test@localhost:5432/testdb'

      - name: 🧪 Run tests
        run: npm run test:coverage
        env:
          DATABASE_URL: 'postgresql://test:test@localhost:5432/testdb'
          POSTGRES_URL_NON_POOLING: 'postgresql://test:test@localhost:5432/testdb'

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/

  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level=high
        continue-on-error: false

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: 🚀 Deploy to Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: 🚀 Deploy
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
