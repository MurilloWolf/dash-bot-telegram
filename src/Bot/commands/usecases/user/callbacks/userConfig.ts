import { CommandInput, CommandOutput } from '../../../../../types/Command.ts';
import {
  UserConfigCallbackData,
  CallbackData,
} from '../../../../../types/callbacks/index.ts';
import { BaseCallbackHandler } from '@bot/commands/shared/handlers/BaseCallbackHandler.ts';

export class UserConfigCallbackHandler extends BaseCallbackHandler {
  canHandle(callbackData: CallbackData): boolean {
    return callbackData.type === 'user_config';
  }

  async handle(input: CommandInput): Promise<CommandOutput> {
    try {
      const data = input.callbackData as UserConfigCallbackData;

      switch (data.action) {
        case 'distances':
          return this.handleDistancesConfig(data.value);
        case 'notifications':
          return this.handleNotificationsConfig(data.value);
        case 'reminder':
          return this.handleReminderConfig(data.value);
        default:
          return this.createErrorResponse(
            'A√ß√£o de configura√ß√£o n√£o reconhecida.'
          );
      }
    } catch (error) {
      this.logError(error, 'UserConfigCallbackHandler');
      return this.createErrorResponse('Erro ao processar configura√ß√£o.');
    }
  }

  private handleDistancesConfig(value?: string): CommandOutput {
    if (!value) {
      return {
        text: `üìè <b>Configurar Dist√¢ncias Favoritas</b>\n\nEscolha suas dist√¢ncias preferidas para receber recomenda√ß√µes personalizadas:`,
        format: 'HTML',
        editMessage: true,
        keyboard: {
          buttons: [
            [
              {
                text: '5km',
                callbackData: {
                  type: 'user_config',
                  action: 'distances',
                  value: '5',
                } as UserConfigCallbackData,
              },
              {
                text: '10km',
                callbackData: {
                  type: 'user_config',
                  action: 'distances',
                  value: '10',
                } as UserConfigCallbackData,
              },
            ],
            [
              {
                text: '21km',
                callbackData: {
                  type: 'user_config',
                  action: 'distances',
                  value: '21',
                } as UserConfigCallbackData,
              },
              {
                text: '42km',
                callbackData: {
                  type: 'user_config',
                  action: 'distances',
                  value: '42',
                } as UserConfigCallbackData,
              },
            ],
          ],
          inline: true,
        },
      };
    }

    return this.createSuccessResponse(
      `Dist√¢ncia ${value}km adicionada √†s suas prefer√™ncias!`
    );
  }

  private handleNotificationsConfig(value?: string): CommandOutput {
    const enabled = value === 'on';
    return this.createSuccessResponse(
      `Notifica√ß√µes ${enabled ? 'ativadas' : 'desativadas'} com sucesso!`
    );
  }

  private handleReminderConfig(value?: string): CommandOutput {
    if (!value || isNaN(parseInt(value))) {
      return this.createErrorResponse(
        'N√∫mero de dias inv√°lido para lembretes.'
      );
    }

    return this.createSuccessResponse(
      `Lembretes configurados para ${value} dia(s) de anteced√™ncia!`
    );
  }
}
